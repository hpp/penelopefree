package com.harmonicprocesses.penelopefree.audio;

public class AudioConstants {
	public final static String AudioThruThreadName = "AudioThru";
	public static final String AudioProcessorThreadName = "AudioProcessor";
	
	public final static int sampleRate = 44100;
	public final static int AudioSpectrumWhat = 16;
	

	public final static int numBytePerFrame = 2; //two bytes per frame, pcm16 and monoChannel
	public final static int numChannels = 1; //set for mono both record and track for now
	
	public static int defaultBufferSize = 512;
	public float wetDry = 0.5f;
	
	public final static double AMPLITUDE_THRESHOLD = 0.001; //used in audio processing 
	public final static double[] //quarterFilterACoeffs = {1,-1.79378,0.813395},
			 //quarterFilterBCoeffs= {0.0191969,-0.0187761,0.0191969};
			/*quarterFilterACoeffs = {0.0000002210785372811109,  
			  - 0.0000042500279967182741,  
			    0.0000807431954426357989,  
			  - 0.0004577483078407282866,  
			    0.0041025077119545994703,  
			  - 0.0120494411538394213812,  
			    0.0676854043643537600650,  
			  - 0.1182403583624455911671,  
			    0.4664070536932772848004,  
			  - 0.49733731717042151121,    
			    1.4623288896091941602151,  
			  - 0.8956069368102028693812,  
			    2.0328549121019117151832,  
			  - 0.5588365678969396954656,  
			    1.0}, 
			quarterFilterBCoeffs = {1.0,14.0,91.0,364.0,1001.0,2002.0,3003.0,
					3432.0,3003.0,2002.0,1001.0,364.0,91.0,14.0,1.0};
			*/
		/*quarterFilterACoeffs = {0.0564793203488497888576,  
	    		0.0472241492286259584299,  
	    		0.0410132254877926191727,  
	    		0.0368119231924892015284,  
	    		0.0340318172509365968192,  
	    		0.0323325681077248489048,  
	    		0.03152520803320508270812,  
	    		0.0315252803320508409590,  
	    		0.0323325681077248974771,  
	    		0.0340318172509365898804,  
	    		0.0368119231924891460173,  
	    		0.0410132254877925983561,  
	    		0.0472241492286260000633,  
	    		0.0564793203488497680409}, 
		quarterFilterBCoeffs = {-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,
				-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0};
	*/
		quarterFilterACoeffs = {-0.0005897471855970812726,-0.0005257498099075822405,
				-0.0004754803651947905538,-0.0004356399184645439295,
				-0.0004039152462129594421,-0.0003786543666426923048,
				-0.0003586620990810691304,-0.0003430679610853413163,
				-0.0003312391676362955693,-0.0003227227008199291119,
				-0.0003172067952056498077,-0.0003144959556522441101,
				-0.0003144959556522213418,-0.0003172067952056255215,
				-0.0003227227008199499286,-0.0003312391676363025082,
				-0.0003430679610853689635,-0.0003586620990811384651,
				-0.0003786543666426922506,-0.0004039152462129315781,
				-0.0004356399184645993864,-0.0004754803651948459565,
				-0.0005257498099076375348,-0.0005897471855971920781},
		/*quarterFilterBCoeffs = {-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,
				-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0};
	/*/
	quarterFilterBCoeffs = {-1.5619227465243414876284,-1.5619227465243414876284,  
	    		-1.4920678683810717490843,-1.4920678683810717490843,
	    		-1.3733672919105481824431,-1.3733672919105481824431,
	    		-1.234138261030642391702,-1.234138261030642391702,
	    		-1.0947730298564586348675,-1.0947730298564586348675,
	    		-0.9665349371920266552394,-0.9665349371920266552394,
	    		-0.8576806328915496102638,-0.8576806328915496102638,
	    		-0.7725434015982850510795,-0.7725434015982850510795,
	    		-0.7104361793512893319402,-0.7104361793512893319402,
	    		-0.6677516995738448368769,-0.6677516995738448368769,
	    		-0.6409070659175479800496,-0.6409070659175479800496,
	    		-0.6278768857723844298846,-0.6278768857723844298846}; 
		//*/
	public final static double[][] noteACoefs = {{1, -1.424159446112778, 0.9971662912449828},
				 {1, -1.357852072965285, 0.9969979814465472},
				 {1, -1.284452441645767, 0.9968196827113388},
				 {1, -1.203345398277623, 0.9966308026461319},
				 {1, -1.11390164731306, 0.9964307136781321},
				 {1, -1.015490131751931, 0.9962187509408957},
				 {1, -0.9074948982733048, 0.9959942100265745},
				 {1, -0.7893374991218262, 0.9957563445945627},
				 {1, -0.6605061415599149, 0.9955043638256239},
				 {1, -0.5205929463396142, 0.9952374297093814},
				 {1, -0.3693407992191619, 0.9949546541517433},
				 {1, -0.2067013439934402, 0.994655095887252}},
				 noteBCoefs = {{0.001416854377508723, 0, -0.001416854377508723},
					 {0.001501009276726475, 0, -0.001501009276726475},
					 {0.001590158644330594, 0, -0.001590158644330594},
					 {0.001684598676934067, 0, -0.001684598676934067},
					 {0.001784643160934056, 0, -0.001784643160934056},
					 {0.001890624529552116, 0, -0.001890624529552116},
					 {0.002002894986712778, 0, -0.002002894986712778},
					 {0.002121827702718511, 0, -0.002121827702718511},
					 {0.002247818087188022, 0, -0.002247818087188022},
					 {0.002381285145309144, 0, -0.002381285145309144},
					 {0.002522672924128256, 0, -0.002522672924128256},
					 {0.002672452056374079, 0, -0.002672452056374079}};
	
	public static int getFloatBufferSize(int buffSize) {
		int floatBufferSize = (defaultBufferSize*buffSize)/(numBytePerFrame*numChannels);
		return floatBufferSize;
	}
	
	public static int getBufferSize(int buffSize) {
		int bufferSize = (defaultBufferSize*buffSize);
		return bufferSize;
	}
}
